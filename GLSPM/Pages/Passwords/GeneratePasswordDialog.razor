@using GLSPM.Client.Dtos.Passwords
@attribute [Authorize(Roles = "Admin")]
<MudDialog Style="width:600px">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Need a strong auto generated password ? I got u 😊👌
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@form">

            <MudSlider @bind-Value="PasswordLength"
                       For="@(() => PasswordLength)"
                       Immediate="true"
                       Label="Length"
                       Min="2"
                       Max="250">
                Length : @PasswordLength
            </MudSlider>

            <MudStack Row="true" Justify="Justify.Center" Class="mb-6">
                <MudChip Disabled="PasswordLength>10" Variant="Variant.Text" Color="Color.Error">Weak</MudChip>
                <MudChip Disabled="PasswordLength>15||PasswordLength<10" Variant="Variant.Text" Color="Color.Info">Normal</MudChip>
                <MudChip Disabled="PasswordLength<=15" Variant="Variant.Text" Color="Color.Success">Strong</MudChip>
            </MudStack>

            <MudTextField @bind-Value="GeneratedPassword"
                          ReadOnly="true"
                          Label="Results"
                          Variant="Variant.Filled"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy"
                          OnAdornmentClick="@(async (e)=>await CopyContent())" />
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="(async ()=>await Submit())">Create</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IPasswordsService PasswordsService { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string GeneratedPassword;
    MudForm form;
    int PasswordLength { get; set; } = 8;
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task Submit()
    {
        var response = await PasswordsService.GeneratePassword(PasswordLength);
        if (response.Success)
        {
            Snackbar.Add(response.Message, Severity.Success);
            GeneratedPassword = response.Data;
        }
        else
        {
            Snackbar.Add(response.Message);
            Snackbar.Add(response.Error.ToString(), Severity.Error);

        }
    }
    async Task CopyContent()
    {
        if (GeneratedPassword != null)
        {
            await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", GeneratedPassword);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("Password Copied!", Severity.Normal);
        }

    }
}