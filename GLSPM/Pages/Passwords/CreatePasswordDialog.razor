@using GLSPM.Client.Dtos.Passwords
@attribute [Authorize(Roles ="Admin")]
<MudDialog Style="width:600px">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Create New Password
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@model" @ref="@form" Validation="@(validtor.ValidateValue)" ValidationDelay="0">
            <MudText Typo="Typo.h4" Align="Align.Center">
                <InputFile id="fileInput" OnChange="(async (e)=>await UploadLogo(e))" hidden />
                @if (!string.IsNullOrEmpty(logoUrl))
                {
                    <MudBadge Icon="@Icons.Material.Filled.Delete" Style="cursor:pointer" @onclick="ClearLogo" Color="Color.Error" Overlap="true" Bordered="true" Class="mx-6 my-4">
                        <MudImage Src="@logoUrl" Height="150" />
                    </MudBadge>
                }
                else
                {
                    <MudFab HtmlTag="label"
                        Class="mx-auto"
                        Color="Color.Primary"
                        Icon="@Icons.Filled.CloudUpload"
                        Label="Upload Logo"
                        for="fileInput" />
                }

            </MudText>

            <MudTextField @bind-Value="model.Title"
                          For="@(() => model.Title)"
                          Immediate="true"
                          Label="Title" />

            <MudTextField @bind-Value="model.Username"
                          For="@(() => model.Username)"
                          Immediate="true"
                          Label="Username" />

            <MudTextField @bind-Value="model.Password"
                          For="@(() => model.Password)"
                          Immediate="true"
                          Label="Password"
                          InputType="InputType.Password" />

            <MudTextField @bind-Value="model.Source"
                          For="@(() => model.Source)"
                          Immediate="true"
                          Label="Source" />

            <MudTextField @bind-Value="model.AdditionalInfo"
                          For="@(() => model.AdditionalInfo)"
                          Immediate="true"
                          Label="AdditionalInfo" />
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="(async ()=>await Submit())">Create</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IPasswordsService PasswordsService { get; set; }
    [Inject] IAccountsService AccountsService { get;set;  }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    PasswordCreateDto model = new();

    PasswordCreateDtoValidator validtor = new();
    MudForm form;
    private string logoUrl = string.Empty;
    IBrowserFile logoFile;
    private async Task UploadLogo(InputFileChangeEventArgs e)
    {
        if (e.File != null && e.File.Size <= IAccountsService.maxAllowedSize)
        {
            logoFile = e.File;
            var buffers = new byte[e.File.Size];
            await logoFile.OpenReadStream(IAccountsService.maxAllowedSize).ReadAsync(buffers);
            logoUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffers)}";

        }
        else
            Snackbar.Add("Image Size Should be 10KB to 2MB ", Severity.Error);

    }
    private void ClearLogo()
    {
        logoUrl = string.Empty;
        logoFile = null;
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task Submit()
    {
        model.UserID = AccountsService.User.UserID;
        await form.Validate();
        if(form.IsValid)
        {
            var response = await PasswordsService.CreateAsync(model, logoFile);
            if(response.Success)
            {
                Snackbar.Add(response.Message, Severity.Success);
                MudDialog.Close(true);
            }
            else
            {
                Snackbar.Add(response.Message);
                Snackbar.Add(response.Error.ToString(), Severity.Error);

            }
        }
    }
}