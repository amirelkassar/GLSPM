@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IPasswordsService PasswordsService
<MudCard Class="card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Class="overtext-dots">@Model.Title</MudText>
            @if (!string.IsNullOrWhiteSpace(Model.Source))
            {
                <MudText Typo="Typo.body2" Class="overtext-dots">@FormatedSource</MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Model.IsSoftDeleted)
            {
                <MudChip Color="Color.Error" Size="Size.Small">Trashed</MudChip>
            }
            else
            {
                <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
            }
        </CardHeaderActions>
    </MudCardHeader>
    @if (EditLogoMode)
    {
        <MudContainer>
            <InputFile id="fileInput" OnChange="(async (e)=>await ChangeLogo(e))" hidden />
            <MudFab HtmlTag="label"
                Class="mx-auto"
                Color="Color.Primary"
                Icon="@Icons.Filled.CloudUpload"
                Label="Upload Logo"
                for="fileInput" />
            <MudIconButton Color="Color.Error" Title="Cancel Change" Icon="@Icons.Material.Filled.Cancel" OnClick="(()=>EditLogoMode=false)" />
        </MudContainer>

    }
    else
    {
        <MudCardMedia Image="@Model.LogoPath" Height="150" />
    }
    <MudCardContent>
        <MudTextField T="string" Label="Username" Variant="Variant.Filled" Text="@Model.Username" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy"
                      OnAdornmentClick="@(async()=>await CopyContent("UN"))" />
        <MudTextField T="string" Label="Password" InputType="InputType.Password" Variant="Variant.Filled" Text="@Model.Password" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy"
                      OnAdornmentClick="@(async ()=>await CopyContent("PW"))" />
    </MudCardContent>
    <MudCardActions>
        <div Class="mx-auto">
            @if (Model.IsSoftDeleted)
            {
                <MudTooltip Text="Restore">
                    <MudIconButton Icon="@Icons.Material.Filled.Restore" OnClick="(async ()=>await RestorePassword())" Color="Color.Primary" />
                </MudTooltip>
                <MudTooltip Text="Delete Forever">
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" OnClick="(async ()=>await DeletePassword())"  Color="Color.Error" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Details">
                    <MudIconButton Icon="@Icons.Material.Filled.Preview" OnClick="(()=>ShowDetails(false))" Color="Color.Primary" />
                </MudTooltip>
                <MudTooltip Text="Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="(()=>ShowDetails(true))" Color="Color.Warning" />
                </MudTooltip>
                <MudTooltip Text="Change Logo">
                    <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="(()=>EditLogoMode=true)" Color="Color.Info" />
                </MudTooltip>
                <MudTooltip Text="Move to trash">
                    <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" OnClick="@(async ()=>await MoveToReash())" Color="Color.Error" />
                </MudTooltip>
            }

        </div>

    </MudCardActions>
</MudCard>

<style>
    .overtext-dots {
        white-space: nowrap;
        width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
@code {
    [Parameter]
    public EventCallback OnRefreshPasswords { get; set; }
    [Parameter] public PasswordReadDto Model { get; set; }
    private string FormatedSource => $"Source<{Model.Source}>";
    private bool EditLogoMode { get; set; } = false;
    private IBrowserFile Logo;
    private async Task ChangeLogo(InputFileChangeEventArgs e)
    {
        if (e.File != null && e.File.Size <= IAccountsService.maxAllowedSize)
        {
            Logo = e.File;
            var buffers = new byte[e.File.Size];
            await Logo.OpenReadStream(IAccountsService.maxAllowedSize).ReadAsync(buffers);
            await PasswordsService.ChangeLogoAsync(Model.ID, Logo);
            Model.LogoPath = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffers)}";
            EditLogoMode = false;
            Snackbar.Add("Logo Updated!");
        }
        else
            Snackbar.Add("Image Size Should be 10KB to 2MB ", Severity.Error);
    }
    async Task CopyContent(string txt)
    {
        switch (txt)
        {
            case "UN":
                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Model.Username);
                break;
            case "PW":
                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Model.Password);
                break;
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Content Copied!", Severity.Normal);
    }
    private void ShowDetails(bool editMode)
    {
        var parameters = new DialogParameters();
        parameters.Add("model", Model);
        parameters.Add("EditMode", editMode);
        parameters.Add("OnRefreshPasswords", OnRefreshPasswords);

        var results = DialogService.Show<PasswordEditDetailsDialog>("Password", parameters);
    }
    async Task DeletePassword()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Message", "You are going to delete this password forever?");
        parameters.Add("Title", "Password Deleting");
        var results = DialogService.Show<ConfirmDelete>("Delete Password", parameters, options);
        if (await results.GetReturnValueAsync<bool>())
        {
            await PasswordsService.DeleteAsync(Model.ID);
            Snackbar.Add("Card Deleted");

            if (OnRefreshPasswords.HasDelegate)
                await OnRefreshPasswords.InvokeAsync();
        }
    }
    private async Task MoveToReash()
    {
        var confirm = await DialogService.ShowMessageBox(
            "Warning",
            "You are going to move this password to trash!",
            yesText: "Trash", cancelText: "Cancel");
        if (confirm.HasValue && confirm.Value)
        {
            await PasswordsService.MoveToTrashAsync(Model.ID);
            Snackbar.Add("Card Moved To Trash!");

            if (OnRefreshPasswords.HasDelegate)
                await OnRefreshPasswords.InvokeAsync();
        }
    }
    private async Task RestorePassword()
    {
        var results = await PasswordsService.RestoreAsync(Model.ID);
        if (results != null && results.Success)
        {
            Snackbar.Add("Password Entity Restored , u can find it now in the active section", Severity.Success);
            if (OnRefreshPasswords.HasDelegate)
                await OnRefreshPasswords.InvokeAsync();
        }
        else
        {
            Snackbar.Add("Couldn't restore the password", Severity.Error);
        }
    }
}
