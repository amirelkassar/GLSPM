@using GLSPM.Client.Dtos.Passwords
@attribute [Authorize(Roles = "Admin")]
@inject IPasswordsService PasswordsService
@inject ISnackbar Snackbar
<MudDialog Style="width:600px">
    <TitleContent>
        @if (!EditMode)
        {
            <MudText Typo="Typo.body2">
                @($"ID<{model.ID}>")
            </MudText>
            <MudText Typo="Typo.h5">
                @model.Title
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.h5">
                Editing Password @($"ID<{model.ID}>")
            </MudText>
        }
    </TitleContent>
    <DialogContent>
        <MudForm Model="@editModel" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
            @if (!EditMode)
            {
                <MudText Typo="Typo.h4" Align="Align.Center">
                    <MudImage Src="@model.LogoPath" Height="150" />
                </MudText>
            }
            <MudTextField @bind-Value="editModel.Title"
                          For="@(() => editModel.Title)"
                          Immediate="true"
                          Label="Title"
                          ReadOnly="!EditMode" />

            <MudTextField @bind-Value="editModel.Username"
                          For="@(() => editModel.Username)"
                          Immediate="true"
                          Label="Username"
                          ReadOnly="!EditMode" />

            <MudTextField @bind-Value="editModel.Password"
                          For="@(() => editModel.Password)"
                          Immediate="true"
                          Label="Password"
                          ReadOnly="!EditMode" />

            <MudTextField @bind-Value="editModel.Source"
                          For="@(() => editModel.Source)"
                          Immediate="true"
                          Label="Source"
                          ReadOnly="!EditMode" />

            <MudTextField @bind-Value="editModel.AdditionalInfo"
                          For="@(() => editModel.AdditionalInfo)"
                          Immediate="true"
                          Label="AdditionalInfo"
                          ReadOnly="!EditMode" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="(()=>MudDialog.Close())">Close</MudButton>
        @if (EditMode)
        {
            <MudButton Color="Color.Info" OnClick="(async ()=>await Submit())">Save</MudButton>
        }
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public PasswordReadDto model { get; set; }
    [Parameter] public EventCallback OnRefreshPasswords { get; set; }
    [Parameter] public bool EditMode { get; set; }
    private MudForm form;
    private PasswordUpdateDto editModel = new PasswordUpdateDto();
    private PasswordUpdateDtoValidator validator = new PasswordUpdateDtoValidator();


    protected async override Task OnInitializedAsync()
    {
        editModel.Title = model.Title;
        editModel.Username = model.Username;
        editModel.Password = model.Password;
        editModel.AdditionalInfo = model.AdditionalInfo;
        editModel.Source = model.Source;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var response = await PasswordsService.UpdateAsync(model.ID, editModel);
            if (response.Success)
            {
                Snackbar.Add("Password Entity Updated!");
                if (OnRefreshPasswords.HasDelegate)
                    await OnRefreshPasswords.InvokeAsync();
                MudDialog.Close(true);
            }
            else
            {
                Snackbar.Add("Faild to update");
                Snackbar.Add(response.Error.ToString(), Severity.Error);
            }
        }
    }

}